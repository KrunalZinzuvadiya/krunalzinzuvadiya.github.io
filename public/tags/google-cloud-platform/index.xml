<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Cloud Platform on Krunal Zinzuvadiya&#39;s Portfolio</title>
    <link>http://localhost:1313/tags/google-cloud-platform/</link>
    <description>Recent content in Google Cloud Platform on Krunal Zinzuvadiya&#39;s Portfolio</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 Apr 2024 11:00:59 -0400</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/google-cloud-platform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>REST API aplication on Google Cloud Platform</title>
      <link>http://localhost:1313/post/chapter-2/</link>
      <pubDate>Wed, 10 Apr 2024 11:00:59 -0400</pubDate>
      <guid>http://localhost:1313/post/chapter-2/</guid>
      <description>&lt;p&gt;The project presents a REST API aplication developed in Python and Flask that was created to retrieve data about books from a SQLite3 database: &lt;a href=&#34;https://github.com/cpatrickalves/simple-flask-api&#34;&gt;https://github.com/cpatrickalves/simple-flask-api&lt;/a&gt;&#xA;A REST API exposes the functionalities of an application or a database through a set of endpoints (URL addresses).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/image13.png&#34; alt=&#34;alt text&#34; title=&#34;Overview&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;These URLs are accessed by clients such as web, mobile apps, or other web services to perform CRUD operations (Create, Read, Update, Delete) or other actions using HTTP requests. The principles of REST and the use of HTTP methods (GET for reading, POST for creating, PUT/PATCH for updating, and DELETE for deleting) allow resources to be manipulated in a standardized and intuitive way.&#xA;Description of the Data Model Used&#xA;Our database “books.db” contains information about books. Data are stored and managed using SQLite - a serverless, file-based relational database management system.&#xA;Choosing Data Storage Solutions, Justifying the Decision&#xA;Since we are working with a relational database, with structured data, where each item (&amp;ldquo;book&amp;rdquo; in this case) has the same set of attributes with specific values, a good choice would be to use a combination of Google Cloud Storage and BigQuery.&#xA;Implementation of the Used Data Model&#xA;We will use App Engine, BigQuery, and Google Cloud Storage:&#xA;● The user sends an HTTP request to the Flask application.&#xA;● app.py receives the request and, if necessary, performs queries to BigQuery.&#xA;● app.py uses requirements.txt to ensure that all necessary libraries are available for processing the request.&#xA;● app.yaml plays a role in configuring how the application is deployed and managed on App Engine, influencing how requests are handled.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
